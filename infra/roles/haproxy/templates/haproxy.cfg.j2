global
    stats socket /var/haproxy-run/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    mode    http
    option  httplog
    # Fake connection:close, required in this setup.
    option  http-server-close
    option  http-pretend-keepalive
    option  dontlognull
    option  redispatch
    option  contstats
    retries 3
    backlog 10000
    timeout client         120s
    timeout connect          5s
    timeout server          25s
    timeout http-keep-alive  1s
    timeout http-request    15s
    timeout queue           30s
    timeout tarpit          60s
    default-server inter 3s rise 2 fall 3
    option forwardfor

frontend all 0.0.0.0:80
    maxconn 1000

    acl is_hdr_connection_upgrade hdr(Connection)  -i upgrade
    acl is_hdr_upgrade_websocket  hdr(Upgrade)     -i websocket

    acl is_stats path_beg /stats

    #use_backend bk_websocket if is_hdr_connection_upgrade is_hdr_upgrade_websocket
    use_backend bk_stats if is_stats
    default_backend bk_static

backend bk_websocket
    # Load-balance according to hash created from first two
    # directories in url path. For example requests going to /1/
    # should be handled by single server (assuming resource prefix is
    # one-level deep, like "/echo").
    balance uri depth 2
    timeout server 120s
  {% for node in groups['app-nodes'] %}
    server srv_ws_{{ node }} {{ ansible_docker0.ipv4.address }}:{{ hostvars[node].node_app_port }} maxconn 200 weight 10 cookie srv_ws_node1 check
  {% endfor %}

backend bk_static
    balance roundrobin
    option httpchk HEAD /health
  {% for node in groups['app-nodes'] %}
    server srv_web_{{ node }} {{ ansible_docker0.ipv4.address }}:{{ hostvars[node].node_app_port }} maxconn 100 weight 10 cookie srv_web_node1 check
  {% endfor %}

backend bk_stats
    stats uri /stats
    stats enable
